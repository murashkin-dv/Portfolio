services:
  fastapi:
    build: ./project/server
    container_name: fastapi_app
    volumes:
      - api_data:/usr/src/app
      - static_data:/usr/src/app/static/
      - socket_data:/run
    ports:
      - 8000:5000
    restart: on-failure
    env_file:
      - .env.dev
    networks:
      - fastapi-network
      - db-network
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:13
    container_name: postgres
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr", "-c", "logging_collector=on", "-c", "log_directory=my_logs" ]
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    env_file:
      - .env.dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U admin" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - '5432:5432'
    networks:
      - db-network

  database-test:
    image: postgres:13
    container_name: postgres-test
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr", "-c", "logging_collector=on", "-c", "log_directory=my_logs" ]
    #  To find log file:
    # https://betterstack.com/community/guides/logging/how-to-start-logging-with-postgresql/
    volumes:
      - postgres_volume_test:/var/lib/postgresql/data/
    env_file:
      - .env.test
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres-test -U admin" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - '5555:5432'
    networks:
      - db-network

  nginx:
    build: ./project/client
    container_name: develop_nginx
    ports:
      - 8080:80
    volumes:
      - api_data:/usr/src/app/
      - static_data:/usr/src/app/static/
      - socket_data:/run
    restart: on-failure
    networks:
      - fastapi-network
    depends_on:
      fastapi:
        condition: service_started

volumes:
  #  to keep database data persistently in case of container restarts
  postgres_volume:
  postgres_volume_test:
  api_data:
  static_data:
  socket_data:

networks:
  fastapi-network:
    driver: bridge
  db-network:
    driver: bridge
