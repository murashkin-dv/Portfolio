user  www-data;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;

    # Fighting with NGINX Error: upstream prematurely closed connection
    # while reading response header from upstream
#     client_max_body_size 20m;
#     keepalive_timeout 0;
#
#     client_body_timeout 2024;
#     client_header_timeout 2024;
#
#     proxy_connect_timeout       600;
#     proxy_send_timeout          600;
#     proxy_read_timeout          600;
#     send_timeout                600;
#
#     proxy_buffer_size   128k;
#     proxy_buffers   4 256k;
#     proxy_busy_buffers_size   256k;
    # end of fight

#     server {
#         listen 80;
#         listen [::]:80;
#
#         root /usr/src/app/;
#         autoindex on;
#
#         # redirect server error pages to the static page /50x.html
#         error_page   500 502 503 504  /50x.html;
#         location = /50x.html {
#             root   /usr/share/nginx/html;
#         }
#
# #       Option 1:
#         location / {
#             include /etc/nginx/uwsgi_params;
#             uwsgi_pass unix:/usr/src/app/nginx/uwsgi.sock;
#             index index.html, index.htm;
#         }
#
#         location /static {
#             alias /usr/src/app/static;
#         }

#         Option 2:
#         location / {
#             # First attempt to serve request as file, then
#             # as directory, then fall back to displaying a 404.
#             try_files $uri $uri/ =404;
#         }
#         Option 3:
#         location / {
#             try_files $uri @app;
#         location @app {
#             include /etc/nginx/uwsgi_params;
#             uwsgi_pass flask:8080;
#         }

#         location /api {
#             uwsgi_pass 127.0.0.1:8080;
#             include uwsgi_params;
#         }
# daemon off;

# New Option with FastApi:
    upstream uvicorn {
           server unix:/run/uvicorn.sock fail_timeout=0;
        }
    server {
        listen 80;
        listen [::]:80;
#         server_name localhost;

        root /usr/src/app;
        autoindex on;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        location / {
            # set the address of the node proxied server
            proxy_pass http://uvicorn;
            # redefine and add some request header lines which will be passed along to the node server
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $connection_upgrade;
#             # forbid all proxy_redirect directives at this level
#             proxy_redirect off;
#             proxy_buffering off;


#             # Disable cache - none of the options help. Manually deteleted cache in Safari
#             proxy_hide_header       Set-Cookie;
#             proxy_ignore_headers    Set-Cookie;
#             # important! Remember the special inheritance rules for proxy_set_header:
#             # http://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_set_header
#             proxy_set_header        Cookie "";
#
#             # don't cache it
#             proxy_no_cache 1;
#             # even if cached, don't try to use it
#             proxy_cache_bypass 1;
#             if_modified_since off;
#             expires off;
        }

#         location /static {
#             alias /usr/src/app/static;
#         }
        location /media {
            alias /usr/src/app/static/media;
        }

        location /static {
            try_files $uri $uri/ /index.html;
            autoindex on;
        }
    }
#     map $http_upgrade $connection_upgrade {
#     default upgrade;
#     '' close;


}
